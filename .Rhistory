install.packages('KernSmooth')
libray(KernSmooth)
library(KernSmooth)
getwd()
setwd("~/Coursera/datascience")
getwd()
search
seach()
search()
?unclass
x <- 1:10
if (x>5) {}
f <- function(x) {}
f <- function(x) {
g <- function(y) {}
y + z
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
clear()
getcwd()
getwd()
open(getwd())
?list.files
files = list.files('specdata')
?list
for file in files:
for (file in files):
for (file in files) {}
for (file in files) {}
for (file in files) {
if (file == '332.csv') {
print('hi')
}
}
data = read.csv(files[1])
?list.files
data = read.csv('specdata' + files[1])
paste('specdata', files[1], sep='/')
data = read.csv(paste('specdata', files[1], sep='/'))
data
data.head()
data[1:11]
data[1]
data[,1]
data[1,]
data[5'',]
data[5'',]
data[5,]
data[1:5,]
data$sulfate
data['sulfate']
is.na(poldata)
is.na(data$sulfate)
a = c(1,2,3)
sum(a)
mean(a)
count(a)
length(a)
a.length()
pollutantmean <- function(directory, pollutant, id=1:332) {
files = list.files(directory)
sum = 0
num = 0
for (file in files) {
relpath = paste(directory, file)
data = read.csv(relpath)
poldata = data(pollutant)
poldata_clean = poldata[!is.nan(poldata)]
sum += sum(poldata_clean)
num += length(poldata)
}
sum/num
}
pollutantmean <- function(directory, pollutant, id=1:332) {
files <- list.files(directory)
sum <- 0
num <- 0
for (file in files) {
relpath <- paste(directory, file)
data <- read.csv(relpath)
poldata <- data(pollutant)
poldata_clean <- poldata[!is.nan(poldata)]
sum += sum(poldata_clean)
num += length(poldata)
}
sum/num
}
pollutantmean <- function(directory, pollutant, id=1:332) {
files <- list.files(directory)
sum <- 0
num <- 0
for (file in files) {
relpath <- paste(directory, file)
data <- read.csv(relpath)
poldata <- data(pollutant)
poldata_clean <- poldata[!is.nan(poldata)]
sum <- sum + sum(poldata_clean)
num <- num + length(poldata)
}
sum/num
}
pollutantmean('specdata', 'sulfate', 1:10)
pollutantmean <- function(directory, pollutant, id=1:332) {
files <- list.files(directory)
sum <- 0
num <- 0
for (file in files) {
relpath <- paste(directory, file, sep='/')
data <- read.csv(relpath)
poldata <- data(pollutant)
poldata_clean <- poldata[!is.nan(poldata)]
sum <- sum + sum(poldata_clean)
num <- num + length(poldata)
}
sum/num
}
pollutantmean('specdata', 'sulfate', 1:10)
pollutantmean <- function(directory, pollutant, id=1:332) {
files <- list.files(directory)
sum <- 0
num <- 0
for (file in files) {
relpath <- paste(directory, file, sep='/')
data <- read.csv(relpath)
poldata <- data(pollutant)
poldata_clean <- poldata[!is.nan(poldata)]
sum <- sum + sum(poldata_clean)
num <- num + length(poldata_clean)
}
sum/num
}
pollutantmean('specdata', 'sulfate', 1:10)
data('sulfate')
data['sulfate']
pollutantmean <- function(directory, pollutant, id=1:332) {
files <- list.files(directory)
sum <- 0
num <- 0
for (file in files) {
relpath <- paste(directory, file, sep='/')
data <- read.csv(relpath)
poldata <- data[pollutant]
poldata_clean <- poldata[!is.nan(poldata)]
sum <- sum + sum(poldata_clean)
num <- num + length(poldata_clean)
}
sum/num
}
pollutantmean('specdata', 'sulfate', 1:10)
pollutantmean <- function(directory, pollutant, id=1:332) {
files <- list.files(directory)
sum <- 0
num <- 0
for (file in files) {
relpath <- paste(directory, file, sep='/')
data <- read.csv(relpath)
poldata <- data[pollutant]
poldata_clean <- poldata[!is.na(poldata)]
sum <- sum + sum(poldata_clean)
num <- num + length(poldata_clean)
}
sum/num
}
pollutantmean('specdata', 'sulfate', 1:10)
pollutantmean <- function(directory, pollutant, id=1:332) {
files <- list.files(directory)
sum <- 0
num <- 0
for (file in files[id]) {
relpath <- paste(directory, file, sep='/')
data <- read.csv(relpath)
poldata <- data[pollutant]
poldata_clean <- poldata[!is.na(poldata)]
sum <- sum + sum(poldata_clean)
num <- num + length(poldata_clean)
}
sum/num
}
pollutantmean('specdata', 'sulfate', 1:10)
pollutantmean('specdata', 'nitrate', 70:72)
pollutantmean('specdata', 'nitrate', 23)
?dataframe
mtcars
mtcars[1]
mtcars[1,2]
x = c(1,2,3)
y = c(4,5,6)
data.frame(x,y)
c(x, 4)
z = c()
c(1, 2)
x[1,2]
x[[1,2]]
x[c(1,2)]
mtcars.values
mtcars.values()
values(mtcars)
is.na(mtcars)
mask = !is.na(mtcars)
mtcars[mask]
mtcars[T]
length(mask)
complete <- function(directory, id=1:332) {
files <- list.files(directory)
nobs = c()
for (file in files[id]) {
relpath = paste(directory, file, sep='/')
data = read.csv(relpath)
mask = !is.na(data)
data_complete = data[mask]
nobs = c(nobs, length(mask))
}
data.frame(id, nobs)
}
source("complete.R")
complete("specdata", 1)
source("prog1/complete.R")
complete("specdata", 1)
source("prog1/complete.R")
complete("specdata", 1)
source("prog1/complete.R")
complete("specdata", 1)
source("prog1/complete.R")
complete("specdata", 1)
source("prog1/complete.R")
complete("specdata", 1)
mvcars
mtcars
mtcars[5]
mtcars[,5]
mtcars[5,]
mtcars[1:4,]
source("prog1/complete.R")
complete("specdata", 1)
source("prog1/complete.R")
complete("specdata", 1)
data
data[,2:3]
for (row in data) {}
for (row in data) {
print(row)
]
for (row in data) {
print(row)
}
for (row in data[,2:3]) {
print(row)
}
data[1:,]
data[1,]
data[1:,]
data[1:4,]
for (row in data[row,]) {
print(row)
}
data[1,]
source('compltete.R')
source('complete.R')
source('prog1/complete.R')
complete("specdata", 1)
data_complete
complete("specdata", 1)
source('prog1/complete.R')
complete("specdata", 1)
source('prog1/complete.R')
complete("specdata", 1)
data_complete
source('prog1/complete.R')
data_complete
complete("specdata", 1)
source('prog1/complete.R')
complete("specdata", 1)
source('prog1/complete.R')
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
?cor
data
data <- read.csv('specdata/001.csv')
sulf <- data$sulfate
nit <- data$nitrate
cor(sulf, nit)
source('prog1/corr.R')
corr('specdata')
source('complete.R')
source('prog1/complete.R')
source('complete.R')
source('prog1/corr.R')
corr('specdata')
source('prog1/corr.R')
corr('specdata')
data
data[c(1, 3:5)]
data[c(1, 3:5),]
source('prog1/corr.R')
cr <- corr("specdata", 150)
head(cr)
source('prog1/corr.R')
cr <- corr("specdata", 150)
warnings()
source('prog1/corr.R')
cr <- corr("specdata", 400)
data
data.head()
head(data)
source('prog1/corr.R')
data.head()
cr <- corr("specdata", 400)
source('prog1/corr.R')
cr <- corr("specdata", 400)
source('prog1/corr.R')
cr <- corr("specdata", 400)
head(cr)
warnings()
sulf <- data$sulfate
sulf
nit <- data$nitrate
nit
!is.na(sulf)
is.na(nit)
nitmask <- !is.na(nit)
sulfmask <-!is.na(sulf)
nitmask & sulfmask
source('prog1/corr.R')
cr <- corr("specdata", 400)
head(cr)
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?runif
x <- matrix(rnorm(200), 20, 10)
rnorm(200)
apply(x, 2, mean)
apply(x, 3, mean)
apply(x, 1, mean)
?quantile
x <- array(rnorm(200), c(2,2,10))
x
1:4
1:4 ==  c(1,2,3,4)
c(1,2,3,4)
rep(1)
rep(4)
rep(4, 16)
?tapply
?gl
gl(5, 1)
gl(5, 2)
traceback()
library(datasets)
data(iris)
?iris
?ls
ls(c(1,2,3))
ls(pattern="O")
ls(pattern="1")
ls(pattern="52")
ls()
iris
colMeans(iris)
mask = (iris$species=='virginica')
mask
mask = iris$species=='virginica'
mask
mask = c(iris$species=='virginica')
mask
tapply(iris$Sepal.Length, iris$Species, mean)
with(mtcars, tapply(mpg, cyl, mean))
d[1]
d = with(mtcars, tapply(mpg, cyl, mean))
d[1]
d[3]
d[1] - d[3]
mtcars
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(hp, cyl, mean))
d=with(mtcars, tapply(hp, cyl, mean))
d[1]-d[3]
mtcars
apply(iris[, 1:4], 2, mean)
with(iris, tapply(Sepal.Length, species,  mean))
with(iris, tapply(Sepal.Length, Species,  mean))
list(c[1,2,3])
list(a=1, b=2, c=3)
c(list(a=1, b=2, c=3))
list(c('a','b','c'), c(1,2,3))
numeric()
numeric(1)
numeric(1,3)
numeric(8)
matrix(iris)
iris
range(4)
range(6)
range(7)
M = (1:6, 2, 3)
M = (1:6, nrow=2, ncol=3)
1:5
c(1:6)
M = (c(1:6), nrow=2, ncol=3)
M = matrix(1:6, nrow=2, ncol=3)
M
t(M)
i(M)
inverse(M)
solve(M)
M = matrix(1:9)
M
M = matrix(1:9, 3, 3)
M
solve(M)
c = rbind(c(1, -1/4), c(-1/4, 1))
solve(c)
a = c(1,2,3,4)
a
a < 3
a == 4
list(1,2,3,4)
l = list(1,2,3,4)
l == 3
l <
2
l < 6
getwd()
source('ProgrammingAssignment2/cachematrix.R')
source('ProgrammingAssignment2/cachematrix.R')
runif(4)
m = matrix(rnorm(9), 3,3)
m
solve(m)
m %*% solve(m)
mc = makeCacheMatrix(m)
cacheSolve(m)
mc
mc$getinv
mc$getinv()
mc
cacheSolve(mc)
source('ProgrammingAssignment2/cachematrix.R')
m
mc = makeCacheMatrix(m)
cacheSolve(mc)
cacheSolve(mc)
mc.get()
mc$get()
mc$get() %*% cacheSolve(mc)
letters
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rep(0:1, each=5)
e <- rnorm(10, 0, 20)
rnorm(10, 0, 20)
rnorm(10, 0, 20)
rnorm(10, 0, 20)
y <- 0.5 + 2*x + e
y
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
